apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

version = VERSION_NAME
group = GROUP

def getRepositoryUsername() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
}

def getRepositoryApiKey() {
    return hasProperty('BINTRAY_API_KEY') ? BINTRAY_API_KEY : ""
}

def getRepositoryPassword() {
    return hasProperty('BINTRAY_GPG_PASSWORD') ? BINTRAY_GPG_PASSWORD : ""
}

bintray {
    user = getRepositoryUsername()
    key = getRepositoryApiKey()
    configurations = ['archives']
    pkg {
        repo = 'kotshi'
        name = POM_ARTIFACT_ID
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        vcsUrl = VCS_URL
        publish = true
        publicDownloadNumbers = true
        version {
            desc = POM_DESCRIPTION
            released  = new Date()
            gpg {
                sign = true
                passphrase = getRepositoryPassword()
            }
        }
    }
}

afterEvaluate { project ->
    install {
        repositories.mavenInstaller {
            pom.project {
                name POM_NAME
                description POM_DESCRIPTION
                url POM_URL

                packaging POM_PACKAGING
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version VERSION_NAME

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}